configurations
{
    Toolset {
        key : "PlatformToolset";
        choices: { v140, v140_xp, v120, v120_xp, };
    };
}
nuget
{
    nuspec
    {
        id = bonsai.gtest-msvc-14;
        version : 1.7.0;
        title: Google Test;
        authors: { Google };      
        licenseUrl: "http://opensource.org/licenses/BSD-3-Clause";
        projectUrl: "https://code.google.com/p/googletest";     
        iconUrl: "https://ssl.gstatic.com/codesite/ph/images/search-48.gif"    
        requireLicenseAcceptance: false;
        summary: Google's framework for writing C++ tests on a variety of platforms;

        /* if you need to span several lines you can prefix a string with 
           an @ symbol (exactly like c# does). */
        description: @"Google's framework for writing C++ tests on a variety of 
                       platforms (Linux, Mac OS X, Windows, Cygwin, Windows CE, 
                       and Symbian). Based on the xUnit architecture. Supports 
                       automatic test discovery, a rich set of assertions, 
                       user-defined assertions, death tests, fatal and non-fatal 
                       failures, value- and type-parameterized tests, various 
                       options for running the tests, and XML test report 
                       generation. 
                       This nuget package includes static and shared binaries 
                       for 32 and 64 bit architectures and for v140 platform 
                       toolsets. Supports both Visual Studio and CMake.";
        copyright: Copyright 2013;
        tags: { native, CoApp, gtest, google test, commandline, cmake };
    };

    files
    {     
        /* For this project since we won't redistribute DLLs, we won't
           put dlls under the default 'bin' key and instead
           store the lib and dll files in the same package, this ensures
           that CoApp will only produce a single nupkg for this
           library.
        */
        dll += {  
            #add-each-file : ::nuget.[default]targets.[${condition}].CopyToOutput;
            #destination : ${d_bin};  
        };

        nestedInclude: {
            #destination = ${d_include}\gtest;
            "..\include\gtest\**\*"
        };    
        
        config: {
            #destination = ${pkg_root};
            ".\*.cmake";     
        };
           
        ("x64,Win32", "v140", "Debug,Release", "static, dynamic") => {
            [${0},${1},${2},dynamic] {  
                lib: {    
                    #destination = ${build_root}\lib\${0}\${1}\dynamic\${2};
                    ".\build\${0}\${1}\dynamic\${2}\gtest.lib";
                    ".\build\${0}\${1}\dynamic\${2}\gtest_main.lib";
                };
                dll: {
                    #destination = ${build_root}\lib\${0}\${1}\dynamic\${2};
                    ".\build\${0}\${1}\dynamic\${2}\gtest.dll";
                    ".\build\${0}\${1}\dynamic\${2}\gtest_main.dll";
                };
            };
            [${0},${1},${2},static] {  
                lib: {    
                    #destination = ${build_root}\lib\${0}\${1}\static\${2};
                    ".\build\${0}\${1}\static\${2}\gtest.lib";
                    ".\build\${0}\${1}\static\${2}\gtest_main.lib";
                };       
            };
        };  
    };
    
    targets {
        [static] {
            Libraries += "shlwapi.lib";
        };
        Includes += ${pkg_root}/${d_include}; 
    };
}
